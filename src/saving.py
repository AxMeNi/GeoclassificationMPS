# -*- coding:utf-8 -*-
__projet__ = "GeoclassificationMPS"
__nom_fichier__ = "saving.py"
__author__ = "MENGELLE Axel"
__date__ = "septembre 2024"


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import os
import pickle



def save_mask(mask_value, output_directory = 'output/', file_name='simulation_grid_mask', params={}, comments='', cmap='tab20'):
    """
    Save a mask array to a .npy file and log the details in a CSV file.

    Parameters
    ----------
    mask_value : np.ndarray
        The mask array to be saved.
    output_directory : str, optional (default: 'output/')
        The directory where the mask file and log file will be saved.
    file_name : str, optional (default: 'simulation_grid_mask')
        The name of the file (without extension) to save the mask as.
    params : dict, optional (default: {})
        A dictionary of additional parameters to log in the CSV file.
    comments : str, optional (default: '')
        Additional comments to log in the CSV file.

    Returns
    -------
    None

    Notes
    -----
    - The mask is saved in NumPy .npy format.
    - A CSV log file ('indicators_log.csv') is created or updated in the output directory to record:
        - Date and time of saving,
        - Mask name,
        - Additional comments,
        - Any extra parameters provided in `params`.
    """
    data_init = {}
    for param, value in params.items():
        data_init[param] = [value]
    os.makedirs(output_directory, exist_ok=True)
    mask_path = os.path.join(output_directory, file_name)
    np.save(mask_path, mask_value)

    image_path = os.path.join(output_directory, file_name + '.png')
    plt.figure(figsize=(6, 6))
    plt.imshow(mask_value, cmap=cmap)
    plt.axis('off')
    plt.savefig(image_path, bbox_inches='tight', pad_inches=0)
    plt.close()

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    data = data_init.copy()
    data = {
        'Date and Time': [now],
        'Mask Name': [file_name],
        'Comments': [comments]
    }
    csv_file_path = os.path.join(output_directory, 'indicators_log.csv')
    if os.path.exists(csv_file_path):
        df_existing = pd.read_csv(csv_file_path, index_col=None)
    else:
        df_existing = pd.DataFrame()
    df_new = pd.DataFrame(data)
    df_updated = pd.concat([df_existing, df_new], ignore_index=True)
    df_updated.to_csv(csv_file_path, index=False)
          

def save_deesse_output(deesse_output, output_dir = 'output/', file_name='deesse_output'):
    """
    Save the deesse_output to a specified folder.

    Parameters:
    -----------
    deesse_output : dict
        The output from the Deesse simulation that you want to save.
    output_dir : str
        The directory where you want to save the output.
    file_name : str
        The name of the file (without extension) to save the output as.

    Returns:
    --------
    None
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
  
    file_path = os.path.join(output_dir, file_name)
    
    with open(file_path, 'wb') as file:
        pickle.dump(deesse_output, file)


def save_simulation(deesse_output, params, comments="", output_directory="output/"):
    """
    Save the Deesse output and log simulation parameters into an CSV file.

    This function saves the output of a Deesse simulation to a specified file and updates an CSV 
    log with the parameters used for the simulation, along with a timestamp, the output file name, 
    and any additional comments. It dynamically creates new columns in the CSV file based on the 
    keys in the provided parameters dictionary.

    Parameters:
    ----------
    deesse_output : dict
        The output generated by the Deesse simulation. This should contain all necessary data to be saved.
    params : dict
        A dictionary containing the parameters used for the simulation.
    comments : str, optional
        Additional comments related to the simulation (default is an empty string).
    output_directory : str, optional
        The directory where the output files will be saved (default is 'output/').

    Returns:
    -------
    None

    Raises:
    ------
    FileNotFoundError
        If the output directory cannot be created.
    ValueError
        If any parameter key in `params` is missing.

    Notes:
    -----
    - The function creates an CSV log file named 'simulation_log.xlsx' in the specified output directory, where each simulation run is appended as a new row.
    - New columns are added to the CSV file as needed when new parameter keys are added to the `params` dictionary.
    """
    os.makedirs(output_directory, exist_ok=True)
    output_file_name = f"deesse_output.pkl" #_{datetime.now().strftime('%Y%m%d_%H%M%S%f')}.pkl"
    save_deesse_output(deesse_output, output_directory, output_file_name)

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S:%f')
    data = {
        'Date and Time': [now],
        'File Name': [output_file_name],
        'Comments': [comments]
    }
    
    for key, value in params.items():
        data[key] = [value]

    csv_file_path = os.path.join(output_directory, 'simulation_log.csv')

    if os.path.exists(csv_file_path):
        df_existing = pd.read_csv(csv_file_path, index_col=None)
    else:
        df_existing = pd.DataFrame()

    df_new = pd.DataFrame(data)

    df_updated = pd.concat([df_existing, df_new], ignore_index=True)
    df_updated.to_csv(csv_file_path, index=False)


def save_indicators(indicators_dict={}, output_directory='output/', comments='',  params={}):
    """
    Save multiple indicator arrays to .npy (NumPy format) files and log the details in a CSV file.

    Parameters:
    -----------
    indicators_dict : dict, optional (default: {})
        A dictionary where keys are indicator names (str) and values are numpy arrays to be saved as .npy files.
    output_directory : str, optional (default: 'output/')
        The directory where the .npy files and the log file will be saved.
    comments : str, optional (default: '')
        Additional comments to log in the CSV file.
    params : dict, optional (default: {})
        A dictionary of additional parameters to log alongside the indicators.

    Returns:
    --------
    None.

    Notes:
    ------
    - A CSV log file ('indicators_log.csv') is created or updated in the output directory to record:
        - Date and time of saving,
        - Indicator name,
        - Additional comments,
        - Any extra parameters provided in `params`.
    """
    data_init = {}
    for key, value in params.items():
        data_init[key] = [value]
    os.makedirs(output_directory, exist_ok=True)
    for indicator_name, indicator_value in indicators_dict.items():
        indicator_path = os.path.join(output_directory, indicator_name)
        np.save(indicator_path, indicator_value)
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        data = data_init.copy()
        data = {
            'Date and Time': [now],
            'Indicator Name': [indicator_name],
            'Comments': [comments]
        }
        csv_file_path = os.path.join(output_directory, 'indicators_log.csv')
        if os.path.exists(csv_file_path):
            df_existing = pd.read_csv(csv_file_path, index_col=None)
        else:
            df_existing = pd.DataFrame()
        df_new = pd.DataFrame(data)
        df_updated = pd.concat([df_existing, df_new], ignore_index=True)
        df_updated.to_csv(csv_file_path, index=False)
          

def save_plot(fname='', default_name='fig.png', output_directory='output/', comments='', params={}):
    """
    Save the current plot to a file and log the details in an Excel file.

    Parameters:
    -----------
    fname : str, optional (default: '')
        The name of the file to save the plot to. If not provided, `default_name` is used.
    default_name : str, optional (default: 'fig.png')
        The default file name used if `fname` is not provided.
    output_directory : str, optional (default: 'output')
        The directory where the plot file and log file will be saved.
    comments : str, optional (default: '')
        Additional comments to log in the Excel file.
    params : dict, optional (default: {})
        A dictionary of parameters to log in the Excel file.

    Returns:
    --------
    None.

    Notes:
    ------
    - The plot is saved in PNG format with a resolution of 300 DPI.
    - The plot is saved with tight bounding box (`bbox_inches='tight'`) to avoid excess whitespace.
    - If `fname` is not specified, the plot is saved with the default file name ('topological_adjacency.png').
    - The function also logs the plot details, date and time, comments, and additional parameters in an Excel file.
    """
    
    os.makedirs(output_directory, exist_ok=True)
    
    if fname == '':
        fname = default_name
    
    plot_path = os.path.join(output_directory, fname)
    plt.subplots_adjust(hspace=0.2)
    plt.savefig(plot_path, dpi=300, bbox_inches='tight')

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    data = {
        'Date and Time': [now],
        'File Name': [fname],
        'Comments': [comments]
    }

    for key, value in params.items():
        data[key] = [value]

    csv_file_path = os.path.join(output_directory, 'plot_log.csv')

    if os.path.exists(csv_file_path):
        df_existing = pd.read_csv(csv_file_path, index_col=None)
    else:
        df_existing = pd.DataFrame()

    df_new = pd.DataFrame(data)

    df_updated = pd.concat([df_existing, df_new], ignore_index=True)

    df_updated.to_csv(csv_file_path, index=False)


def save_log_to_csv(log_df, filename='timing_log.csv'):
    """
    Save the process log DataFrame to a CSV file.

    This function saves the `log_df` DataFrame, which contains the process timing information, 
    to a specified CSV file. The function will overwrite the file if it already exists.

    Parameters:
    ----------
    log_df : pandas.DataFrame
        The DataFrame containing the process timing logs, where each row represents 
        a logged process with its name, start time, end time, and duration.
    filename : str, optional
        The name of the CSV file where the log will be saved. Default is 'timing_log.csv'.
        
    Returns:
    -------
    None
    """
    
    log_df.to_csv(filename, index=False)
