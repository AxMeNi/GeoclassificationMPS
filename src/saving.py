# -*- coding:utf-8 -*-
__projet__ = "GeoclassificationMPS"
__nom_fichier__ = "saving.py"
__author__ = "MENGELLE Axel"
__date__ = "septembre 2024"

import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import os
import pickle



def save_deesse_output(deesse_output, output_dir, file_name):
    """
    Save the deesse_output to a specified folder.

    Parameters:
    -----------
    deesse_output : dict
        The output from the Deesse simulation that you want to save.
    output_dir : str
        The directory where you want to save the output.
    file_name : str
        The name of the file (without extension) to save the output as.

    Returns:
    --------
    None
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
  
    file_path = os.path.join(output_dir, file_name)
    
    with open(file_path, 'wb') as file:
        pickle.dump(deesse_output, file)


def save_simulation(deesse_output, params, comments="", output_directory="output/"):
    """
    Save the Deesse output and log simulation parameters into an Excel file.

    This function saves the output of a Deesse simulation to a specified file and updates an Excel 
    log with the parameters used for the simulation, along with a timestamp, the output file name, 
    and any additional comments. It dynamically creates new columns in the Excel file based on the 
    keys in the provided parameters dictionary.

    Parameters:
    ----------
    deesse_output : dict
        The output generated by the Deesse simulation. This should contain all necessary data to be saved.
    params : dict
        A dictionary containing the parameters used for the simulation.
    comments : str, optional
        Additional comments related to the simulation (default is an empty string).
    output_directory : str, optional
        The directory where the output files will be saved (default is 'output/').

    Returns:
    -------
    None

    Raises:
    ------
    FileNotFoundError
        If the output directory cannot be created.
    ValueError
        If any parameter key in `params` is missing.

    Notes:
    -----
    - The function creates an Excel log file named 'simulation_log.xlsx' in the specified output directory, where each simulation run is appended as a new row.
    - New columns are added to the Excel file as needed when new parameter keys are added to the `params` dictionary.
    """
    os.makedirs(output_directory, exist_ok=True)
    output_file_name = f"deesse_output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pkl"
    save_deesse_output(deesse_output, output_directory, output_file_name)

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    data = {
        'Date and Time': [now],
        'File Name': [output_file_name],
        'Comments': [comments]
    }
    
    for key, value in params.items():
        data[key] = [value]

    excel_file_path = os.path.join(output_directory, 'simulation_log.xlsx')

    if os.path.exists(excel_file_path):
        df_existing = pd.read_excel(excel_file_path,engine="openpyxl)
    else:
        df_existing = pd.DataFrame()

    df_new = pd.DataFrame(data)

    df_updated = pd.concat([df_existing, df_new], ignore_index=True)
    df_updated.to_excel(excel_file_path, index=False)


def load_pickle_file(file_path):
    """
    Load data from a pickle file.

    Parameters:
    ----------
    file_path : str
        The path to the pickle file to be loaded.

    Returns:
    -------
    data : object
        The data loaded from the pickle file.
    """
    with open(file_path, 'rb') as file:
        data = pickle.load(file)
    return data
    

def save_plot(fname='', default_name='fig.png', output_directory='output/', comments='', params={}):
    """
    Save the current plot to a file and log the details in an Excel file.

    Parameters:
    -----------
    fname : str, optional (default: '')
        The name of the file to save the plot to. If not provided, `default_name` is used.
    default_name : str, optional (default: 'fig.png')
        The default file name used if `fname` is not provided.
    output_directory : str, optional (default: 'output')
        The directory where the plot file and log file will be saved.
    comments : str, optional (default: '')
        Additional comments to log in the Excel file.
    params : dict, optional (default: {})
        A dictionary of parameters to log in the Excel file.

    Returns:
    --------
    None.

    Notes:
    ------
    - The plot is saved in PNG format with a resolution of 300 DPI.
    - The plot is saved with tight bounding box (`bbox_inches='tight'`) to avoid excess whitespace.
    - If `fname` is not specified, the plot is saved with the default file name ('topological_adjacency.png').
    - The function also logs the plot details, date and time, comments, and additional parameters in an Excel file.
    """
    
    os.makedirs(output_directory, exist_ok=True)
    
    if fname == '':
        fname = default_name
    
    plot_path = os.path.join(output_directory, fname)
    plt.subplots_adjust(hspace=0.2)
    plt.savefig(plot_path, dpi=300, bbox_inches='tight')

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    data = {
        'Date and Time': [now],
        'File Name': [fname],
        'Comments': [comments]
    }

    for key, value in params.items():
        data[key] = [value]

    excel_file_path = os.path.join(output_directory, 'plot_log.xlsx')

    if os.path.exists(excel_file_path):
        df_existing = pd.read_excel(excel_file_path)
    else:
        df_existing = pd.DataFrame()

    df_new = pd.DataFrame(data)

    df_updated = pd.concat([df_existing, df_new], ignore_index=True)

    df_updated.to_excel(excel_file_path, index=False)